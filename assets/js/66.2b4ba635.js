(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{448:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("以前一直是内网访问, 很少考虑外网访问的安全性问题, 最近开始弄服务器之后才发现这么多问题, iptables 是一个很好的工具, 可以阻止很多奇怪的访问, 但是也被docker透烂了, 会加一些奇怪的规则, 导致可以直接ip:端口号访问, 让我措手不及. 现在弄到了两种解决的办法")]),t._v(" "),s("h2",{attrs:{id:"屏蔽端口访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#屏蔽端口访问"}},[t._v("#")]),t._v(" 屏蔽端口访问")]),t._v(" "),s("p",[t._v("虽然docker插入了奇怪的iptables, 不过我们也可以加, 屏蔽相应的 docker 端口实现屏蔽ip访问的效果.")]),t._v(" "),s("p",[s("code",[t._v("iptables -I DOCKER-USER -p tcp --dport 5244 -j DROP")])]),t._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/xiongzaiqiren/p/iptables.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("详情可看"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),s("p",[t._v("这个端口是容器的端口, 不是你映射出来的端口")])]),t._v(" "),s("h2",{attrs:{id:"只允许本地访问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#只允许本地访问"}},[t._v("#")]),t._v(" 只允许本地访问")]),t._v(" "),s("p",[t._v("本来这些服务我就是要通过 nginx 映射出去使用的, 我只是不希望ip:端口的访问, 于是我发现这种我更加喜欢的写法")]),t._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" neosmemo/memos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("stable\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" memos\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bridge\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("5230"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5230")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("通过 127.0.0.1:5230 这种写法, 就可以避免这些问题了.")]),t._v(" "),s("h3",{attrs:{id:"docker-network"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-network"}},[t._v("#")]),t._v(" docker network")]),t._v(" "),s("p",[t._v("今天发现如果是一个network里面的容器, 可以通过容器名实现直接访问.")]),t._v(" "),s("p",[t._v("这解决了我不想把 rsshub 开放到公网又不知道怎么让阅读器使用的问题.")])])}),[],!1,null,null,null);s.default=n.exports}}]);